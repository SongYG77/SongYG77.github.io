{"pages":[],"posts":[{"title":"post","text":"","link":"/2020/07/10/post/"},{"title":"Hexo의 시작","text":"블로그 시작블로그를 만들겠다고 생각한 후 어떤 것을 이용하여 만들지 고민을 했었다.카카오, 네이버 등등 일반적으로 많이 알려진 블로그도 있었고 다른 사이트들도 많았었다. 처음에 notion을 사용하다 무언가 부족한 느낌이 들어 찾아본 것이 github.io였다.이것은 github를 이용해 자신만의 페이지를 만들 수 있었다. 물론 notion을 사용하면 글쓰기의 편리함이 있과 관리나 스타트가 굉장히 쉬웠다. 하지만 블로그 프레임 워크를 사용할 경우 마크다운을 이용해 글을 작성해야 하는 불편함 등이 있다.그래도 심화된 블로그 운영을 하고 싶어서 github io를 이용하게 되었다. github io를 만들 때 사용할 블로그 프레임 워크로 Jekyll과 Hexo가 있었는데,더 빠르고 로컬확인이 간편한 Hexo에 이끌려서 hexo를 이용하게 되었다. Hexo?Hexo는 블로그 프레임 워크로 Node.JS를 기반으로 한다. 포스트의 경우 마크다운 문서를 페이지로 변환하여 블로그의 포스트 형태로 바꾸어준다. 그래서 기본적으로 마크다운에 대해 거부감이 없는 사람이라면 이것을 이용해 개인블로그를 만드는 것을 추천한다. Hexo를 이용하여 무료 서버들에 손쉽게 접근하여 올릴수 있는데 그중 대표적으로 사용되는 github도 이용이 가능하다. Hexo를 사용하기 위해선 Node.JS와 git이 설치가 되어있어야 한다. Hexo : https://hexo.io Node.js : https://nodejs.org Git : https://git-scm.com Hexo 설치1234567**npm install -g hexo-cli****hexo init 이름****cd 이름****npm install** 위 명령어들을 작성한다. 이름의 경우는 자신이 원하는 이름을 적어주면 된다. 실행을 하면 ‘이름’폴더 아래에 여러가지 폴더가 생긴다. 이제 전체적인 스타트는 끝이 났다.만약 중간에 오류가 뜨면 보통은 그 아래 해결하기 위한 방법을 제시해 준다.그 방법을 따라해보면 좋다. Hexo 테마Hexo를 이용하여 만든 테마들이 많다. 워낙 유명하고 많은 사람들이 사용하기 때문에 공개되어 있는 테마들을 찾아 적용하면 된다. 공개된 테마들을 github에 찾아 들어가면 코드 링크가 있다. 그 링크를 복사한 후 themes 디렉토리로 이동해**git clone git링크**를 적어주면 자동으로 다운로드 한다. themes디렉토리에 보면 다운받은 테마의 디렉토리명이 있는데 그것을 “_config.yml” 파일의 theme 부분에 적어준다. 기본값으로 landscape라고 적혀 있는 부분을 바꿔주면 된다. Git 연결먼저 git을 연결해주는 플러그인을 설치해야 한다. **npm install hexo-deployer-git --save** 그리고 테마 적용할 때 사용했던 _config.yml을 들어가준다.아래 보면 deploy: 부분이 있는데 1234deploy:&lt;br&gt; type: git&lt;br&gt; repo: 자신의 git 레파지토리&lt;br&gt; branch: master&lt;br&gt; 으로 수정해 준다. 그러면 이제 hexo에서 배포를 할 때 자신의 git에 올라가게 된다.배포할 때 주로 사용되는 명령어로는 generate와 deploy가 있다. hexo generate** :정적 파일을 생성한다. github io는 정적 웹사이트 구축이므로 파일을 만들어 줘야 한다.1234````**$ hexo deploy** :만든 파일들을 배포한다. `&lt;br&gt;&lt;br&gt;처음 deploy 할 때 자신이 누구인지 알려달라는 문구가 나온다. 이는 git에 올라갈 때 어떤 이름과 이메일을 사용할 지 설정하는 것이다. &lt;br&gt; git config –global user.email “이메일”git config –global user.name “이름” 을 입력하고 다시 deploy 하면 해결된다. 그리고 올릴 github 레파지토리에 보면 설정하는 부분이 있다. page란에 가면 source에 branch master로 바꿔야 정상적으로 동작한다. 바꾸면 자신의 블로그 URL이 나오게 된다. &lt;br&gt;&lt;br&gt; ## 마침. 블로그를 만든지 초창기라 여러가지 공부를 하고 있다. hexo를 보면 여러가지 구현할 수 있는 것들이 많다(썸네일, 댓글 등등). 이런것들을 좀 더 많이 공부하여 완성도 높은 블로그를 만들때까지 노력할 것이다. &lt;br&gt;&lt;br&gt;","link":"/2020/07/10/Hexo%EC%97%90%EC%84%9C-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%EB%90%A0-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%93%A4/"},{"title":"정렬 K번째 수","text":"문제 설명 링크프로그래머스 - 정렬 K번째 수 코드다음 문제는 간단하게 해결이 가능하다.commands의 수를 입력받아 얼만큼의 수를 뽑아낼 지 결정한다.그 이후 슬라이싱 한 결과를 저장할 임시 리스트를 만든 후 정렬시킨다.정렬시킨 리스트에서 우리가 뽑아야 하는 숫자를 찾아 answer 리스트에 추가 시킨다.그러면 원하는 결과가 나오게 된다. 1234567891011array = [1,5,2,6,3,7,4]commands = [[2,5,3], [4,4,1], [1,7,3]]answer = []templst = []for i in range(len(commands)) templst = array[commands[i][0]-1:commands[i][1]] templst = sorted(templst) ans = templst[commands[i][2]-1] answer.append(ans)print(answer) 위 코드는 파이썬 프로그램에서 확인을 위해 array와 commands에 예제값을 집어넣어 실행한 것이다.프로그래머스 링크에서 확인과 채첨을 하는 경우 123456789def solution(array, commands): answer = [] templst = [] for i in range(len(commands)) : templst = array[commands[i][0]-1:commands[i][1]] templst = sorted(templst) ans = templst[commands[i][2]-1] answer.append(ans) return answer 위 코드를 입력하면 결과가 나온다.처음 풀어보는 문제는 난이도가 가장 쉬운 것이였다. 그래서 푸는데 큰 어려움이 없었다.","link":"/2020/07/21/Sort-Index-Of-K/"},{"title":"스텍&#x2F;큐 주식가격","text":"문제 설명 링크프로그래머스 - 정렬 K번째 수 풀이이번 문제에서는 여러가지의 경우를 통해 코딩을 하였다. 12345678910111213prices = [1,2,3,2,3]lstlen = len(prices)answer = []for i in range(lstlen) : answer.append(lstlen-i-1)for i in range(lstlen) : a = lstlen-1 - i; for j in range(len(prices)) : if prices[j]&gt;prices[a] : answer[j] = a-j; prices.pop()print(answer)#정확성 통과 효율성 불통 처음 작성한 코드는 다음과 같다. 처음 for문으로 초기화를 시켜주고, 마지막 값과 비교해가며 비교가 끝나면 pop하는 형식으로 코드를 작성했다.정확성에서는 만점을 받았지만 효율성에서는 모두 오답이 나왔다. 그래서 작성을 한 것이 다음 코드이다. 123456789101112131415prices = [1,2,3,2,3]lstlen = len(prices)templst = prices[:]count = 0answer = []for i in range(lstlen) : for j in range(len(templst)) : count+=1 if prices[i] &gt; templst[j]: break answer.append(count-1) count = 0 templst.remove(prices[i])print(answer)#정확성 통과 효율성 불통 처음 코드에서 초기화하는 for문을 줄이게 된다면 O(N)만큼의 시간이 줄어들어 더 효율적이라고 생각했다. 이때 어떻게 하면 시간을 줄이고 공간을 효율적으로 사용 가능한지 고민하기 시작했다.제일 먼저 본 것은 templst 부분이였다. 굳이 같은 리스트를 하나 더 만들어 사용해야 할까? 라는 생각이 들어 그것을 고민하고 찾아보았다. 그래서 발견한게 collections 모듈이였다. Collections 메소드1from collections import deque 이 메소드는 deque를 사용하기 위한 모듈이다. deque란 자료구조의 한 종류로 앞과 뒤에서 자료를 추가 삭제, 즉 양방향으로 데이터를 관리할 수 있는 형태이다.Python에서 제공하는 메소드중 하나로 일반적인 append(), pop()뿐만 아니라 popleft(), appendleft()의 기능까지 추가로 사용이 가능하다. 최종 코드위 메소드를 사용하여 만든 최종 코드이다. 123456789101112131415from collections import dequeprices = [1,2,3,2,3]answer = []count = 0;q = deque(prices)while q: n = q.popleft() for i in q : count += 1 if n &gt; i : break answer.append(count) count=0print(answer)#드디어 성공! 위 코드를 보면 prices를 메소드를 이용해 큐의 형태로 만들어준다.q의 값이 있을때 까지 while문이 반복하게 되고 그안에서는 popleft와 for문을 넣어준다. for문 안에는 pop을 한 값과 인덱스들을 비교하며 손해가 나기 전까지를 카운트하고 손해가 발생시 break를 한다.break가 발생되면 카운트 한 값을 answer부분에 append() 해주면 결과가 나오게 된다.이번 코드는 collections 메소드를 알게 된 중요한 코딩테스트였다. 자료구조를 C언어로 배웠던 터라 파이썬의 메소드를 잘 몰랐었다. 이번 기회로 여러 메소드를 알아보고 활용하는 것이 중요하다는 생각이 들었다.","link":"/2020/07/21/Stack-Queue-Prices/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"codingtest","slug":"codingtest","link":"/tags/codingtest/"},{"name":"sort","slug":"sort","link":"/tags/sort/"},{"name":"programmers","slug":"programmers","link":"/tags/programmers/"},{"name":"stack&#x2F;queue","slug":"stack-queue","link":"/tags/stack-queue/"}],"categories":[{"name":"startup","slug":"startup","link":"/categories/startup/"},{"name":"Coding_Test","slug":"Coding-Test","link":"/categories/Coding-Test/"}]}